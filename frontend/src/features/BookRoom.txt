import { useEffect, useState } from "react";
import apiService from "../utils/apiService";
import { useParams } from "react-router-dom";

import pdfMake from "pdfmake/build/pdfmake";
import pdfFonts from "pdfmake/build/vfs_fonts";

pdfMake.vfs = pdfFonts.pdfMake.vfs;

interface Room {
  id: string;
  name: string;
  price: number;
}

interface Invoice {
  bookingId: string;
  customerName: string;
  totalCost: number;
  discount: number;
}

const downloadInvoice = (invoice: Invoice) => {
  const docDefinition = {
    content: [
      { text: "Invoice", style: "header" },
      { text: `Booking ID: ${invoice.bookingId}`, style: "subheader" },
      { text: `Customer Name: ${invoice.customerName}`, style: "subheader" },
      { text: `Total Cost: ${invoice.totalCost}`, style: "subheader" },
      { text: `Discount: ${invoice.discount}`, style: "subheader" },
    ],
    styles: {
      header: {
        fontSize: 18,
        bold: true,
        // margin: [0, 0, 0, 10],
      },
      subheader: {
        fontSize: 16,
        bold: true,
        // margin: [0, 10, 0, 5],
      },
      tableExample: {
        // margin: [0, 5, 0, 15],
      },
    },
  };

  pdfMake.createPdf(docDefinition).download("Invoice.pdf");
};

const BookRoom = () => {
  const { id } = useParams<{ id: string }>();
  const [room, setRoom] = useState<Room | null>(null);
  const [isBooked, setIsBooked] = useState<boolean>(false);
  const [checkIn, setCheckIn] = useState<string>("");
  const [checkOut, setCheckOut] = useState<string>("");
  const [guestName, setGuestName] = useState<string>("");
  const [invoice, setInvoice] = useState(null);

  const [bookedRoomsCount, setBookedRoomsCount] = useState(0);

  useEffect(() => {
    const fetchRoomDetails = async () => {
      try {
        const roomDetails = await apiService.roomDetails(id!);
        setRoom(roomDetails);
      } catch (error) {
        console.error("Failed to fetch room details:", error);
      }
    };

    fetchRoomDetails();
  }, [id]);

  // const handleBookRoom = async () => {
  //   try {
  //     // Book the room
  //     const booking = await apiService.bookRoom(
  //       id!,
  //       checkIn,
  //       checkOut,
  //       guestName
  //     );
  //     setIsBooked(true);

  //     // Create an invoice for the booking
  //     const invoice = await apiService.createInvoice(booking._id);
  //     console.log(invoice);
  //     setInvoice(invoice);
  //   } catch (error) {
  //     console.error("Failed to book room or create invoice:", error);
  //   }
  // };

  const handleBookRoom = async () => {
    try {
      // Book the room
      const booking = await apiService.bookRoom(
        id!,
        checkIn,
        checkOut,
        guestName
      );
      setIsBooked(true);

      // Increment the count of booked rooms
      setBookedRoomsCount(bookedRoomsCount + 1);

      // Apply a 5% discount if 3 or more rooms are booked
      let totalCost = booking.totalCost;
      if (bookedRoomsCount >= 3) {
        totalCost *= 0.95;
      }

      // Create an invoice for the booking with the discounted total cost
      const invoice = await apiService.createInvoice(booking._id, totalCost);
      console.log(invoice);
      setInvoice(invoice);
    } catch (error) {
      console.error("Failed to book room or create invoice:", error);
    }
  };

  if (!room) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h2>BookRoom</h2>
      <p>Room Name: {room?.name}</p>
      <p>Room Price: {room?.price}</p>
      <input
        type="date"
        value={checkIn}
        onChange={(e) => setCheckIn(e.target.value)}
      />
      <input
        type="date"
        value={checkOut}
        onChange={(e) => setCheckOut(e.target.value)}
      />
      <input
        type="text"
        value={guestName}
        onChange={(e) => setGuestName(e.target.value)}
      />
      {isBooked ? (
        <>
          <button disabled>Room Booked</button>
        </>
      ) : (
        <button onClick={handleBookRoom}>Book Room</button>
      )}

      {invoice && (
        <div>
          <h2>Invoice</h2>
          <p>Booking ID: {invoice.bookingId}</p>
          <p>Customer Name: {invoice.customerName}</p>
          <p>Total Cost: {invoice.totalCost}</p>
          <p>Discount: {invoice.discount}</p>

          <button onClick={() => downloadInvoice(invoice)}>
            Download Invoice
          </button>
        </div>
      )}
    </div>
  );
};

export default BookRoom;
